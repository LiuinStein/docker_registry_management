package cn.shaoqunliu.c.hub.utils;

import cn.shaoqunliu.c.hub.utils.reflection.POJOReflection;

import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

public class ObjectCopyingUtils {

    public static <T> T copyNonNullProperties(T source, T target) {
        POJOReflection sourceReflection = new POJOReflection(source);
        POJOReflection targetReflection = new POJOReflection(target);
        targetReflection.forEachField(field -> {
            try {
                if (targetReflection.getValue(field.getName()) == null) {
                    targetReflection.setValue(field.getName(), sourceReflection.getValue(field.getName()));
                }
            } catch (Exception ignored) {

            }
        });
        return target;
    }

    // the inner proxied object will be ignored here due to
    // we can not creat a new instance of the proxied class
    public static <P, E> E copyProjectionToEntity(P projection, E entity) {
        Class pClazz = projection.getClass();
        POJOReflection e = new POJOReflection(entity);
        if (Proxy.isProxyClass(projection.getClass())) {
            // generated by dynamic proxy
            for (Method method : pClazz.getDeclaredMethods()) {
                String methodName = method.getName();
                if (methodName.startsWith("get")) {
                    String fieldName = methodName.substring(3, 4).toLowerCase() + methodName.substring(4);
                    try {
                        Object fieldValue = method.invoke(projection);
                        if (Proxy.isProxyClass(fieldValue.getClass())) {
                            // ignore the inner proxied object
                            continue;
                        }
                        e.setValue(fieldName, fieldValue);
                    } catch (Exception ignored) {

                    }
                }
            }
        }
        return entity;
    }

    public static <T> T coverDifferentProperties(T source, T target) {
        POJOReflection sourceReflection = new POJOReflection(source);
        POJOReflection targetReflection = new POJOReflection(target);
        targetReflection.forEachField(field -> {
            try {
                Object s = sourceReflection.getValue(field.getName());
                Object t = targetReflection.getValue(field.getName());
                if (!s.equals(t)) {
                    targetReflection.setValue(field.getName(), s);
                }
            } catch (Exception ignored) {

            }
        });
        return target;
    }
}