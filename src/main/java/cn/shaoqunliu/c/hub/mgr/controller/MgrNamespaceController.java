package cn.shaoqunliu.c.hub.mgr.controller;

import cn.shaoqunliu.c.hub.mgr.exception.ResourceNeedCreatedAlreadyExistsException;
import cn.shaoqunliu.c.hub.mgr.security.token.MgrAuthenticationToken;
import cn.shaoqunliu.c.hub.mgr.service.DockerNamespaceService;
import cn.shaoqunliu.c.hub.mgr.vo.RestfulResult;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.constraints.Pattern;
import java.util.Objects;

@Validated
@RestController
@RequestMapping("/v1/namespace")
public class MgrNamespaceController {

    private final DockerNamespaceService namespaceService;

    @Autowired
    public MgrNamespaceController(DockerNamespaceService namespaceService) {
        this.namespaceService = namespaceService;
    }

    @RequestMapping(value = "/{namespace}", method = RequestMethod.POST, produces = {MediaType.APPLICATION_JSON_VALUE})
    @ResponseStatus(HttpStatus.CREATED)
    public RestfulResult addNamespace(@PathVariable("namespace")
                                      @Pattern(regexp = "[a-zA-Z][a-zA-Z0-9_]*") String namespace) throws ResourceNeedCreatedAlreadyExistsException {
        // the @PathVariable will assure the namespace value within URL is not null
        if (SecurityContextHolder.getContext().getAuthentication()
                instanceof MgrAuthenticationToken) {
            Integer uid = ((MgrAuthenticationToken) SecurityContextHolder.getContext().getAuthentication())
                    .getAccessDetails().getUid();
            // the Spring Security will check if the token valid
            // and a valid token with a correct json web signature will
            // generated by the auth_server, and it will ensure all the information
            // needed will be filled in Claims correctly, and no field will be null.
            // but here, we check if it null again to ensure twice,
            // and prevent the next logic crashed from the auth_server
            // logic changed or other bugs caused incorrect token was signed
            // by the auth_server.
            Objects.requireNonNull(uid);
            RestfulResult result = new RestfulResult(HttpStatus.CREATED.value(),
                    "namespace created");
            result.addData("nid", namespaceService.addNamespaceIfNotExists(namespace, uid).getId());
            return result;
        }
        // will never happen theoretically due to the Spring Security
        // will filter those bad requests
        throw new BadCredentialsException("Bad authentication");
    }
}
